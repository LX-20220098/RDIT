function polymodel = polyfitn(indepvar,depvar,modelterms)
if nargin<1
  help polyfitn
  return
end
[n,p] = size(indepvar);
if n == 1
  indepvar = indepvar';
  [n,p] = size(indepvar);
end
[m,q] = size(depvar);
if m == 1
  depvar = depvar';
  [m,q] = size(depvar);
end
if q~=1
  error 'Only 1 dependent variable allowed at a time.'
end

if n~=m
  error 'indepvar and depvar are of inconsistent sizes.'
end
stdind = sqrt(diag(cov(indepvar)));
if any(stdind==0)
  warning 'Constant terms in the model must be entered using modelterms'
  stdind(stdind==0) = 1;
end
indepvar_s = indepvar*diag(1./stdind);
if iscell(modelterms) || ischar(modelterms)
  [modelterms,varlist] = parsemodel(modelterms,p);
  if size(modelterms,2) < p
    modelterms = [modelterms, zeros(size(modelterms,1),p - size(modelterms,2))];
  end  
elseif length(modelterms) == 1
  [modelterms,varlist] = buildcompletemodel(modelterms,p);
elseif size(modelterms,2) ~= p
  error 'ModelTerms must be a scalar or have the same # of columns as indepvar'
end
nt = size(modelterms,1);
if nt>1
  mtu = unique(modelterms,'rows');
  if size(mtu,1)<nt
    warning 'Replicate terms identified in the model.'
  end
end
M = ones(n,nt);
scalefact = ones(1,nt);
for i = 1:nt
  for j = 1:p
    M(:,i) = M(:,i).*indepvar_s(:,j).^modelterms(i,j);
    scalefact(i) = scalefact(i)/(stdind(j)^modelterms(i,j));
  end
end
[Q,R,E] = qr(M,0);
polymodel.ModelTerms = modelterms;
polymodel.Coefficients(E) = R\(Q'*depvar);
yhat = M*polymodel.Coefficients(:);
polymodel.Coefficients=polymodel.Coefficients.*scalefact;
s = norm(depvar - yhat);
if n > nt
  Rinv = R\eye(nt);
  Var(E) = s^2*sum(Rinv.^2,2)/(n-nt);
  polymodel.ParameterVar = Var.*(scalefact.^2);
  polymodel.ParameterStd = sqrt(polymodel.ParameterVar);
else
  polymodel.ParameterVar = inf(1,nt);
  polymodel.ParameterStd = inf(1,nt);
end
if any((M(1,:) ~= 0) & all(diff(M,1,1) == 0,1))
  polymodel.R2 = max(0,1 - (s/norm(depvar-mean(depvar)) )^2);
  polymodel.AdjustedR2 = 1 - (1 - polymodel.R2).*((n - 1)./(n - nt));
else
  polymodel.R2 = max(0,1 - (s/norm(depvar))^2);
  polymodel.AdjustedR2 = 1 - (1 - polymodel.R2).*(n./(n - nt));
end
polymodel.RMSE = sqrt(mean((depvar - yhat).^2));
function [modelterms,varlist] = buildcompletemodel(order,p)
if p == 0
  modelterms = [];
elseif (order == 0)
  modelterms = zeros(1,p);
elseif (p==1)
  modelterms = (order:-1:0)';
else
  modelterms = zeros(0,p);
  for k = order:-1:0
    t = buildcompletemodel(order-k,p-1);
    nt = size(t,1);
    modelterms = [modelterms;[repmat(k,nt,1),t]];
  end
end
varlist = cell(1,p);
for i = 1:p
  varlist{i} = ['X',num2str(i)];
end
function [modelterms,varlist] = parsemodel(model,p);
modelterms = zeros(0,p);
if ischar(model)
  model = deblank(model);
end
varlist = {};
while ~isempty(model)
  if iscellstr(model)
    term = model{1};
    model(1) = [];
  else
    [term,model] = strtok(model,' ,');
  end
  if strcmpi(term,'constant')
    modelterms(end+1,:) = 0;
  else
    expon = zeros(1,p);
    while ~isempty(term)
      vn = strtok(term,'*/^. ,');
      k = find(strncmp(vn,varlist,length(vn)));
      if isempty(k)
        nv = length(varlist);
        if ismember(vn(1),'1234567890_')
          error(['Variable is not a valid name: ''',vn,''''])
        elseif nv>=p
          error 'More variables in the model than columns of indepvar'
        end
        varlist{nv+1} = vn;
        k = nv+1;
      end
      i = strfind(term,vn);
      term = term((i+length(vn)):end);
      eflag = false;
      if strncmp('^',term,1)
        term(1) = [];
        eflag = true;
      elseif strncmp('.^',term,2)
        term(1:2) = [];
        eflag = true;
      end
      ev = 1;
      if eflag
        ev = sscanf(term,'%f');
        if isempty(ev)
            error 'Problem with an exponent in parsing the model'
        end
      end
      expon(k) = expon(k) + ev;
      k1 = strfind(term,'*');
      if isempty(k1)
        term = '';
      else
        term(k1(1)) = ' ';
      end      
    end  
    modelterms(end+1,:) = expon;      
  end  
end
[varlist,tags] = sort(varlist);
modelterms = modelterms(:,tags);
